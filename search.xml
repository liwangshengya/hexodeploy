<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>聚类</title>
      <link href="/2022/01/28/%E8%81%9A%E7%B1%BB/"/>
      <url>/2022/01/28/%E8%81%9A%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>聚类是一种无监督学习。与分类不同的是，分类的数据集都是有标签的已经指明了该样本是哪一类，而对于聚类其数据集样本是没有标签的，需要我们根据特征对这些数据进行聚类。<br>K-Means算法是一种无监督学习的聚类方法。</p><h3 id="1-K-Means算法">1.K-Means算法</h3><p>算法接受参数K，然后将事先输入的n个数据对象划分成K个聚类以便使得所获得得聚类满足：同一聚类中得对象相似的较高，而不同聚类中的对象相似度较小。<br>算法思想：以空间中K个点为中心进行聚类，对著靠近他们得对象归类。通过迭代的方法，逐次更新聚类中心得值，直至得到最好的聚类结果。<br>K—MEANS算法步骤：<br>1.先从没有标签得元素集合A中随机取k个元素，作为k个子集各自的重心<br>2.分别计算剩下得元素到k个子集重心得距离（这里的距离也可以使用欧氏距离），根据距离将这些元素分别划归到最近的子集。<br>3.根据聚类得结果，重新计算重心（（重心得计算方法是计算子集中所有元素各个维度得算数平均数）<br>4.将集合A中全部元素按照新的重心然后在重新聚类。<br>5.重复第4步，直到聚类结果不再发生改变。<br>举例：<br><img src="https://img-blog.csdnimg.cn/835ed9804bbd42b3bc21023e322a48d8.png" alt="在这里插入图片描述"><br>以上边得数据为例，给定k=2，假设第一次我们选取得重心为(1,1)(2,1),分别计算所有得点到重心的距离，结果如下图的D0所示，按照每个元素到达重心的距离远近将其划分到相应的子集中，结果如G0所示；</p><p><img src="https://img-blog.csdnimg.cn/4dbce6925c2c45839e7c17cf8d7501bf.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/ce93e53eaa0141a99c05580da5b0db46.png" alt="在这里插入图片描述"><br>在重新计算新的重心，对应第一个类别，由于就只有(1，1)一个点，所以其重心就是(1,1)本身，对于第二个类别其重心就是所以点的X，Y轴坐标分别相加求平均值，为c2。所以新的重心就变成了图上五角星所表示的点。<br>再次计算各个点到重心的距离得到D1，按照计算出来的距离进行划分得到新的划分结果G1，再次重新计算重心C1，c2。<br><img src="https://img-blog.csdnimg.cn/db0e67a32fe34495a3e4a354c9d5cce7.png" alt=""><br>接着照着上边的步骤进行计算得到D2，G2，发现聚类结果不再发生改变，聚类停止迭代。</p><h5 id="python实现">python实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data=np.genfromtxt(<span class="string">&#x27;kmeans.txt&#x27;</span>,delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.shape)</span><br><span class="line"><span class="built_in">print</span>(data[:<span class="number">5</span>,:])</span><br><span class="line"></span><br><span class="line">plt.scatter(data[:,<span class="number">0</span>],data[:,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>(80, 2)[[ 1.658985  4.285136] [-3.453687  3.424321] [ 4.838138 -1.151539] [-5.379713 -3.362104] [ 0.972564  2.924086]]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/liwangshengya/picture/img/202201282236381.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eucldistance</span>(<span class="params">v1,v2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(<span class="built_in">sum</span>((v2-v1)**<span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initCenter</span>(<span class="params">data,k</span>):</span></span><br><span class="line">    numSanples,dim=data.shape</span><br><span class="line">    <span class="comment">#获取样本行数和列数</span></span><br><span class="line"></span><br><span class="line">    center=np.zeros((k,dim))</span><br><span class="line">    <span class="comment">#生成k个重心</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        index=<span class="built_in">int</span>(np.random.uniform(<span class="number">0</span>,numSanples))</span><br><span class="line">        <span class="comment">#从0-79中随机选择一个索引</span></span><br><span class="line">        center[i,:]=data[index,:]</span><br><span class="line">        <span class="comment">#初始化重心</span></span><br><span class="line">    <span class="keyword">return</span> center  </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmeans</span>(<span class="params">data,k</span>):</span></span><br><span class="line">    numSamples=data.shape[<span class="number">0</span>]<span class="comment">#样本个数</span></span><br><span class="line">    <span class="comment">#样本的属性，第一列表示它属于哪个簇，第二列表示它与该簇的误差（到重心的距离）</span></span><br><span class="line">    resultData=np.array(np.zeros((numSamples,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">    isChange=<span class="literal">True</span> <span class="comment">#聚类是否发生了改变</span></span><br><span class="line"></span><br><span class="line">    center=initCenter(data,k)</span><br><span class="line">    <span class="comment">#初始化重心</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (isChange):</span><br><span class="line">        isChange=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#对每个样本进行循环，计算器属于那个类别</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numSamples):</span><br><span class="line">            Mindist=<span class="number">10000</span></span><br><span class="line">            minindex=<span class="number">0</span></span><br><span class="line">            <span class="comment">#先给一个很大的距离</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                distance=eucldistance(center[j,:],data[i,:])</span><br><span class="line">                <span class="comment">#循环计算每一个样本点到每一个重心的距离</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#如果计算出的距离小于当前最小距离，则对最小距离进行更新</span></span><br><span class="line">                <span class="keyword">if</span>(distance&lt;Mindist):</span><br><span class="line">                    Mindist=distance</span><br><span class="line">                    resultData[i,<span class="number">1</span>]=distance</span><br><span class="line">                    minindex=j<span class="comment">#更新样本的簇</span></span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> resultData[i,<span class="number">0</span>] !=minindex:<span class="comment">#样本的簇发生了改变，需要继续更新</span></span><br><span class="line">                isChange=<span class="literal">True</span><span class="comment">#质心要重新计算</span></span><br><span class="line">                resultData[i,<span class="number">0</span>]=minindex<span class="comment">#更新样本的簇</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="comment"># 获取第j个簇所有的样本所在的索引</span></span><br><span class="line">            cluster_index=np.nonzero(resultData[:,<span class="number">0</span>]==j)</span><br><span class="line">            point=data[cluster_index]</span><br><span class="line">            <span class="comment">#提取出第j簇的所有样本点</span></span><br><span class="line">            center[j,:]=np.mean(point,axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> center,resultData</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test=np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(test==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(np.nonzero(test==<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(test[np.nonzero(test==<span class="number">0</span>)])</span><br></pre></td></tr></table></figure><pre><code>[ True False False False False  True False False False False  True False](array([ 0,  5, 10], dtype=int64),)[0 0 0]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示结果 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showCluster</span>(<span class="params">data, k, centroids, resultData</span>):</span>  </span><br><span class="line">    numSamples, dim = data.shape  </span><br><span class="line">    <span class="keyword">if</span> dim != <span class="number">2</span>:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dimension of your data is not 2!&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 用不同颜色形状来表示各个类别</span></span><br><span class="line">    mark = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;^r&#x27;</span>, <span class="string">&#x27;+r&#x27;</span>, <span class="string">&#x27;sr&#x27;</span>, <span class="string">&#x27;dr&#x27;</span>, <span class="string">&#x27;&lt;r&#x27;</span>, <span class="string">&#x27;pr&#x27;</span>]  </span><br><span class="line">    <span class="keyword">if</span> k &gt; <span class="built_in">len</span>(mark):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Your k is too large!&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 画样本点  </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numSamples):  </span><br><span class="line">        markIndex = <span class="built_in">int</span>(resultData[i, <span class="number">0</span>])  </span><br><span class="line">        plt.plot(data[i, <span class="number">0</span>], data[i, <span class="number">1</span>], mark[markIndex])  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 用不同颜色形状来表示各个类别</span></span><br><span class="line">    mark = [<span class="string">&#x27;*r&#x27;</span>, <span class="string">&#x27;*b&#x27;</span>, <span class="string">&#x27;*g&#x27;</span>, <span class="string">&#x27;*k&#x27;</span>, <span class="string">&#x27;^b&#x27;</span>, <span class="string">&#x27;+b&#x27;</span>, <span class="string">&#x27;sb&#x27;</span>, <span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;&lt;b&#x27;</span>, <span class="string">&#x27;pb&#x27;</span>]  </span><br><span class="line">    <span class="comment"># 画质心点 </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):  </span><br><span class="line">        plt.plot(centroids[i, <span class="number">0</span>], centroids[i, <span class="number">1</span>], mark[i], markersize = <span class="number">20</span>)  </span><br><span class="line">  </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">k=<span class="number">4</span><span class="comment">#设置k</span></span><br><span class="line">center,resultData=kmeans(data,k)</span><br><span class="line"><span class="comment">#计算重心和距离</span></span><br><span class="line">showCluster(data,k,center,resultData)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liwangshengya/picture/img/202201282236624.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">center</span><br></pre></td></tr></table></figure><pre><code>array([[-3.68133264, -3.18226857],       [ 2.39738441,  1.74393033],       [ 3.104819  , -3.107608  ],       [-2.5978898 ,  1.81264996]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#做预测</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">datas</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.array([np.argmin(((np.tile(data,(k,<span class="number">1</span>))-center)**<span class="number">2</span>).<span class="built_in">sum</span>(axis=<span class="number">1</span>)) <span class="keyword">for</span> data <span class="keyword">in</span> datas])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x_test=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">a=np.tile(x_test,[k,<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>((a**<span class="number">2</span>).<span class="built_in">sum</span>(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>[[1 2] [1 2] [1 2] [1 2]][5 5 5 5]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数据值所在的范围</span></span><br><span class="line">x_min, x_max = data[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">y_min, y_max = data[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网格矩阵</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                     np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line">z = predict(np.c_[xx.ravel(), yy.ravel()])<span class="comment"># ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据</span></span><br><span class="line">z=z.reshape(xx.shape)</span><br><span class="line">cs=plt.contourf(xx,yy,z)</span><br><span class="line">showCluster(data,k,center,resultData)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liwangshengya/picture/img/202201282237095.png" alt="png"></p><h5 id="sklearn实现">sklearn实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data=np.genfromtxt(<span class="string">&#x27;kmeans.txt&#x27;</span>,delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">k=<span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练模型</span></span><br><span class="line">model=KMeans(n_clusters=k)</span><br><span class="line">model.fit(data)</span><br></pre></td></tr></table></figure><pre><code>KMeans(n_clusters=4)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">centers=model.cluster_centers_</span><br><span class="line"><span class="comment">#中心点坐标</span></span><br><span class="line">centers</span><br></pre></td></tr></table></figure><pre><code>array([[-3.38237045, -2.9473363 ],       [ 2.6265299 ,  3.10868015],       [ 2.80293085, -2.7315146 ],       [-2.46154315,  2.78737555]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#预测结果</span></span><br><span class="line">result=model.predict(data)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>array([1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3,       2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0,       1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3,       2, 0, 1, 3, 2, 0, 1, 3, 2, 0, 1, 3, 2, 0])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数据值所在的范围</span></span><br><span class="line">x_min, x_max = data[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">y_min, y_max = data[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网格矩阵</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                     np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line">z = model.predict(np.c_[xx.ravel(), yy.ravel()])<span class="comment"># ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据</span></span><br><span class="line">z=z.reshape(xx.shape)</span><br><span class="line">cs=plt.contourf(xx,yy,z)</span><br><span class="line"></span><br><span class="line">mark = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;^r&#x27;</span>, <span class="string">&#x27;+r&#x27;</span>, <span class="string">&#x27;sr&#x27;</span>, <span class="string">&#x27;dr&#x27;</span>, <span class="string">&#x27;&lt;r&#x27;</span>, <span class="string">&#x27;pr&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">0</span>]):  </span><br><span class="line">  </span><br><span class="line">        plt.plot(data[i, <span class="number">0</span>], data[i, <span class="number">1</span>], mark[result[i]])  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 用不同颜色形状来表示各个类别</span></span><br><span class="line">mark = [<span class="string">&#x27;*r&#x27;</span>, <span class="string">&#x27;*b&#x27;</span>, <span class="string">&#x27;*g&#x27;</span>, <span class="string">&#x27;*k&#x27;</span>, <span class="string">&#x27;^b&#x27;</span>, <span class="string">&#x27;+b&#x27;</span>, <span class="string">&#x27;sb&#x27;</span>, <span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;&lt;b&#x27;</span>, <span class="string">&#x27;pb&#x27;</span>]  </span><br><span class="line"><span class="comment"># 画质心点 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):  </span><br><span class="line">    plt.plot(centers[i, <span class="number">0</span>], centers[i, <span class="number">1</span>], mark[i], markersize = <span class="number">20</span>)  </span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liwangshengya/picture/img/202201282237061.png" alt="png"></p><h3 id="2-Mini-Batch-K-Means">2.Mini Batch K-Means</h3><p>Mini Batch K-Means 算法是K—Means算法的变种，采用小批量的数据子集减小计算时间。这里的小批量是指每次训练算法时所随机抽取的数据子集，采用这些随机产生的子集进行训练，大大减少了计算时间，结果一般只略差与标准算法。<br>该算法的迭代步骤有两步：<br>1.从数据集中随机抽取一些数据形成小批量，把他们分配给更近的重心<br>2.更新重心<br>Mini Batch K-Means比K-Means 相比有更快的收敛速度，但同时也降低了聚类效果</p><h5 id="sklearn实现-2">sklearn实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MiniBatchKMeans</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=np.genfromtxt(<span class="string">&#x27;kmeans.txt&#x27;</span>,delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">model1=MiniBatchKMeans(n_clusters=<span class="number">4</span>)</span><br><span class="line">model1.fit(data)</span><br></pre></td></tr></table></figure><pre><code>MiniBatchKMeans(n_clusters=4)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">centers1=model1.cluster_centers_</span><br><span class="line">centers1</span><br></pre></td></tr></table></figure><pre><code>array([[-3.35355922, -2.94580235],       [-2.38894596,  2.82134059],       [ 2.79165315, -2.79705023],       [ 2.61970115,  3.11412341]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result1=model1.predict(data)</span><br><span class="line"><span class="built_in">print</span>(result1)</span><br></pre></td></tr></table></figure><pre><code>[3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数据值所在的范围</span></span><br><span class="line">x_min, x_max = data[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">y_min, y_max = data[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网格矩阵</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                     np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line">z = model1.predict(np.c_[xx.ravel(), yy.ravel()])<span class="comment"># ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据</span></span><br><span class="line">z=z.reshape(xx.shape)</span><br><span class="line">cs=plt.contourf(xx,yy,z)</span><br><span class="line"></span><br><span class="line">mark = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;^r&#x27;</span>, <span class="string">&#x27;+r&#x27;</span>, <span class="string">&#x27;sr&#x27;</span>, <span class="string">&#x27;dr&#x27;</span>, <span class="string">&#x27;&lt;r&#x27;</span>, <span class="string">&#x27;pr&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">0</span>]):  </span><br><span class="line">  </span><br><span class="line">        plt.plot(data[i, <span class="number">0</span>], data[i, <span class="number">1</span>], mark[result1[i]])  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 用不同颜色形状来表示各个类别</span></span><br><span class="line">mark = [<span class="string">&#x27;*r&#x27;</span>, <span class="string">&#x27;*b&#x27;</span>, <span class="string">&#x27;*g&#x27;</span>, <span class="string">&#x27;*k&#x27;</span>, <span class="string">&#x27;^b&#x27;</span>, <span class="string">&#x27;+b&#x27;</span>, <span class="string">&#x27;sb&#x27;</span>, <span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;&lt;b&#x27;</span>, <span class="string">&#x27;pb&#x27;</span>]  </span><br><span class="line"><span class="comment"># 画质心点 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):  </span><br><span class="line">    plt.plot(centers1[i, <span class="number">0</span>], centers1[i, <span class="number">1</span>], mark[i], markersize = <span class="number">20</span>)  </span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liwangshengya/picture/img/202201282237725.png" alt="png"></p><h3 id="3-K-Means-算法问题">3.K-Means 算法问题</h3><h5 id="1-对于K个初始质心的选择比较敏感，容易陷入局部最小值">1.对于K个初始质心的选择比较敏感，容易陷入局部最小值</h5><p>对于K个初始质心的选择比较敏感，容易陷入局部最小值。<br>例如在运行K-Means的程序中，每次运行结果可能都不一样，如下面的两种情况，K-Means也是收敛了，但只是收敛到了局部最小值<br><img src="https://img-blog.csdnimg.cn/6fd3aad3464e4946bc6ee56d1d35216a.png" alt="在这里插入图片描述"><br>解决办法：<br>使用多次的随机初始化，计算每一次建模得到的代价函数的值，选取代价函数最小的结果最为聚类结果。<br><img src="https://img-blog.csdnimg.cn/0ee45cf2134a4e4eb8539d1a73b837f3.png" alt="在这里插入图片描述"><br>x表示样本，u表示x对应得簇得重心。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=np.genfromtxt(<span class="string">&#x27;kmeans.txt&#x27;</span>,delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.shape)</span><br><span class="line"><span class="built_in">print</span>(data[:<span class="number">5</span>,:])</span><br></pre></td></tr></table></figure><pre><code>(80, 2)[[ 1.658985  4.285136] [-3.453687  3.424321] [ 4.838138 -1.151539] [-5.379713 -3.362104] [ 0.972564  2.924086]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eucldistance</span>(<span class="params">v1,v2</span>):</span><span class="comment">#计算距离</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(<span class="built_in">sum</span>((v2-v1)**<span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initCenter</span>(<span class="params">data,k</span>):</span></span><br><span class="line">    numSanples,dim=data.shape</span><br><span class="line">    <span class="comment">#获取样本行数和列数</span></span><br><span class="line"></span><br><span class="line">    center=np.zeros((k,dim))</span><br><span class="line">    <span class="comment">#生成k个重心</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        index=<span class="built_in">int</span>(np.random.uniform(<span class="number">0</span>,numSanples))</span><br><span class="line">        <span class="comment">#从0-79中随机选择一个索引</span></span><br><span class="line">        center[i,:]=data[index,:]</span><br><span class="line">        <span class="comment">#初始化重心</span></span><br><span class="line">    <span class="keyword">return</span> center   </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmeans</span>(<span class="params">data,k</span>):</span></span><br><span class="line">    numSamples=data.shape[<span class="number">0</span>]<span class="comment">#样本个数</span></span><br><span class="line">    <span class="comment">#样本的属性，第一列表示它属于哪个簇，第二列表示它与该簇的误差（到重心的距离）</span></span><br><span class="line">    resultData=np.array(np.zeros((numSamples,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">    isChange=<span class="literal">True</span> <span class="comment">#聚类是否发生了改变</span></span><br><span class="line"></span><br><span class="line">    center=initCenter(data,k)</span><br><span class="line">    <span class="comment">#初始化重心</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (isChange):</span><br><span class="line">        isChange=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#对每个样本进行循环，计算器属于那个类别</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numSamples):</span><br><span class="line">            Mindist=<span class="number">10000</span></span><br><span class="line">            minindex=<span class="number">0</span></span><br><span class="line">            <span class="comment">#先给一个很大的距离</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                distance=eucldistance(center[j,:],data[i,:])</span><br><span class="line">                <span class="comment">#循环计算每一个样本点到每一个重心的距离</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#如果计算出的距离小于当前最小距离，则对最小距离进行更新</span></span><br><span class="line">                <span class="keyword">if</span>(distance&lt;Mindist):</span><br><span class="line">                    Mindist=distance</span><br><span class="line">                    resultData[i,<span class="number">1</span>]=distance</span><br><span class="line">                    minindex=j<span class="comment">#更新样本的簇</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> resultData[i,<span class="number">0</span>] !=minindex:<span class="comment">#样本的簇发生了改变，需要继续更新</span></span><br><span class="line">                isChange=<span class="literal">True</span><span class="comment">#质心要重新计算</span></span><br><span class="line">                resultData[i,<span class="number">0</span>]=minindex<span class="comment">#更新样本的簇</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="comment"># 获取第j个簇所有的样本所在的索引</span></span><br><span class="line">            cluster_index=np.nonzero(resultData[:,<span class="number">0</span>]==j)</span><br><span class="line">            point=data[cluster_index]</span><br><span class="line">            <span class="comment">#提取出第j簇的所有样本点</span></span><br><span class="line">            center[j,:]=np.mean(point,axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> center,resultData</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示结果 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showCluster</span>(<span class="params">data, k, centroids, resultData</span>):</span>  </span><br><span class="line">    numSamples, dim = data.shape  </span><br><span class="line">    <span class="keyword">if</span> dim != <span class="number">2</span>:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dimension of your data is not 2!&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 用不同颜色形状来表示各个类别</span></span><br><span class="line">    mark = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;^r&#x27;</span>, <span class="string">&#x27;+r&#x27;</span>, <span class="string">&#x27;sr&#x27;</span>, <span class="string">&#x27;dr&#x27;</span>, <span class="string">&#x27;&lt;r&#x27;</span>, <span class="string">&#x27;pr&#x27;</span>]  </span><br><span class="line">    <span class="keyword">if</span> k &gt; <span class="built_in">len</span>(mark):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Your k is too large!&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 画样本点  </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numSamples):  </span><br><span class="line">        markIndex = <span class="built_in">int</span>(resultData[i, <span class="number">0</span>])  </span><br><span class="line">        plt.plot(data[i, <span class="number">0</span>], data[i, <span class="number">1</span>], mark[markIndex])  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 用不同颜色形状来表示各个类别</span></span><br><span class="line">    mark = [<span class="string">&#x27;*r&#x27;</span>, <span class="string">&#x27;*b&#x27;</span>, <span class="string">&#x27;*g&#x27;</span>, <span class="string">&#x27;*k&#x27;</span>, <span class="string">&#x27;^b&#x27;</span>, <span class="string">&#x27;+b&#x27;</span>, <span class="string">&#x27;sb&#x27;</span>, <span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;&lt;b&#x27;</span>, <span class="string">&#x27;pb&#x27;</span>]  </span><br><span class="line">    <span class="comment"># 画质心点 </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):  </span><br><span class="line">        plt.plot(centroids[i, <span class="number">0</span>], centroids[i, <span class="number">1</span>], mark[i], markersize = <span class="number">20</span>)  </span><br><span class="line">  </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#做预测</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">datas</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.array([np.argmin(((np.tile(data,(k,<span class="number">1</span>))-center)**<span class="number">2</span>).<span class="built_in">sum</span>(axis=<span class="number">1</span>)) <span class="keyword">for</span> data <span class="keyword">in</span> datas])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">k=<span class="number">4</span></span><br><span class="line"></span><br><span class="line">min_loss=<span class="number">10000</span></span><br><span class="line">min_loss_center=np.array([])</span><br><span class="line">min_loss_result=np.array([])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    center,resultData=kmeans(data,k)</span><br><span class="line">    loss=<span class="built_in">sum</span>(resultData[:,<span class="number">1</span>])/data.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> loss&lt;min_loss:</span><br><span class="line">        min_loss=loss</span><br><span class="line">        min_loss_center=center</span><br><span class="line">        min_loss_result=resultData</span><br><span class="line"></span><br><span class="line">center=min_loss_center</span><br><span class="line">resultData=min_loss_result</span><br><span class="line">showCluster(data,k,center,resultData)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liwangshengya/picture/img/202201282309883.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数据值所在的范围</span></span><br><span class="line">x_min, x_max = data[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">y_min, y_max = data[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网格矩阵</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                     np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line">z = predict(np.c_[xx.ravel(), yy.ravel()])<span class="comment"># ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据</span></span><br><span class="line">z=z.reshape(xx.shape)</span><br><span class="line">cs=plt.contourf(xx,yy,z)</span><br><span class="line">showCluster(data,k,center,resultData)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liwangshengya/picture/img/202201282309329.png" alt="png"></p><p>在经过多次循环取得损失最小时对应的重心和结果时，多次运行聚类的结果明显比较稳定了许多</p><h5 id="2-K值选取是由用户决定的，不同k值得到的结果会有很大的不同">2.K值选取是由用户决定的，不同k值得到的结果会有很大的不同</h5><p><img src="https://img-blog.csdnimg.cn/8f780430c9234c0694ce2f8c90c64dbf.png" alt="在这里插入图片描述"><br>解决办法：肘部法则<br><img src="https://img-blog.csdnimg.cn/971d1d45e86d4109a5f5d2eb887069dd.png" alt="在这里插入图片描述"><br>若图像中没有肘部点，需要自己根据需要来设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line">data=np.genfromtxt(<span class="string">&#x27;kmeans.txt&#x27;</span>,delimiter=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eucldistance</span>(<span class="params">v1,v2</span>):</span><span class="comment">#计算距离</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(<span class="built_in">sum</span>((v2-v1)**<span class="number">2</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initCenter</span>(<span class="params">data,k</span>):</span></span><br><span class="line">    numSanples,dim=data.shape</span><br><span class="line">    <span class="comment">#获取样本行数和列数</span></span><br><span class="line"></span><br><span class="line">    center=np.zeros((k,dim))</span><br><span class="line">    <span class="comment">#生成k个重心</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        index=<span class="built_in">int</span>(np.random.uniform(<span class="number">0</span>,numSanples))</span><br><span class="line">        <span class="comment">#从0-79中随机选择一个索引</span></span><br><span class="line">        center[i,:]=data[index,:]</span><br><span class="line">        <span class="comment">#初始化重心</span></span><br><span class="line">    <span class="keyword">return</span> center</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmeans</span>(<span class="params">data,k</span>):</span></span><br><span class="line">    numSamples=data.shape[<span class="number">0</span>]<span class="comment">#样本个数</span></span><br><span class="line">    <span class="comment">#样本的属性，第一列表示它属于哪个簇，第二列表示它与该簇的误差（到重心的距离）</span></span><br><span class="line">    resultData=np.array(np.zeros((numSamples,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">    isChange=<span class="literal">True</span> <span class="comment">#聚类是否发生了改变</span></span><br><span class="line"></span><br><span class="line">    center=initCenter(data,k)</span><br><span class="line">    <span class="comment">#初始化重心</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (isChange):</span><br><span class="line">        isChange=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#对每个样本进行循环，计算器属于那个类别</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numSamples):</span><br><span class="line">            Mindist=<span class="number">10000</span></span><br><span class="line">            minindex=<span class="number">0</span></span><br><span class="line">            <span class="comment">#先给一个很大的距离</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                distance=eucldistance(center[j,:],data[i,:])</span><br><span class="line">                <span class="comment">#循环计算每一个样本点到每一个重心的距离</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#如果计算出的距离小于当前最小距离，则对最小距离进行更新</span></span><br><span class="line">                <span class="keyword">if</span>(distance&lt;Mindist):</span><br><span class="line">                    Mindist=distance</span><br><span class="line">                    resultData[i,<span class="number">1</span>]=distance</span><br><span class="line">                    minindex=j<span class="comment">#更新样本的簇</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> resultData[i,<span class="number">0</span>] !=minindex:<span class="comment">#样本的簇发生了改变，需要继续更新</span></span><br><span class="line">                isChange=<span class="literal">True</span><span class="comment">#质心要重新计算</span></span><br><span class="line">                resultData[i,<span class="number">0</span>]=minindex<span class="comment">#更新样本的簇</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="comment"># 获取第j个簇所有的样本所在的索引</span></span><br><span class="line">            cluster_index=np.nonzero(resultData[:,<span class="number">0</span>]==j)</span><br><span class="line">            point=data[cluster_index]</span><br><span class="line">            <span class="comment">#提取出第j簇的所有样本点</span></span><br><span class="line">            center[j,:]=np.mean(point,axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> center,resultData</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示结果 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showCluster</span>(<span class="params">data, k, centroids, resultData</span>):</span>  </span><br><span class="line">    numSamples, dim = data.shape  </span><br><span class="line">    <span class="keyword">if</span> dim != <span class="number">2</span>:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dimension of your data is not 2!&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 用不同颜色形状来表示各个类别</span></span><br><span class="line">    mark = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;^r&#x27;</span>, <span class="string">&#x27;+r&#x27;</span>, <span class="string">&#x27;sr&#x27;</span>, <span class="string">&#x27;dr&#x27;</span>, <span class="string">&#x27;&lt;r&#x27;</span>, <span class="string">&#x27;pr&#x27;</span>]  </span><br><span class="line">    <span class="keyword">if</span> k &gt; <span class="built_in">len</span>(mark):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Your k is too large!&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 画样本点  </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numSamples):  </span><br><span class="line">        markIndex = <span class="built_in">int</span>(resultData[i, <span class="number">0</span>])  </span><br><span class="line">        plt.plot(data[i, <span class="number">0</span>], data[i, <span class="number">1</span>], mark[markIndex])  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 用不同颜色形状来表示各个类别</span></span><br><span class="line">    mark = [<span class="string">&#x27;*r&#x27;</span>, <span class="string">&#x27;*b&#x27;</span>, <span class="string">&#x27;*g&#x27;</span>, <span class="string">&#x27;*k&#x27;</span>, <span class="string">&#x27;^b&#x27;</span>, <span class="string">&#x27;+b&#x27;</span>, <span class="string">&#x27;sb&#x27;</span>, <span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;&lt;b&#x27;</span>, <span class="string">&#x27;pb&#x27;</span>]  </span><br><span class="line">    <span class="comment"># 画质心点 </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):  </span><br><span class="line">        plt.plot(centroids[i, <span class="number">0</span>], centroids[i, <span class="number">1</span>], mark[i], markersize = <span class="number">20</span>)  </span><br><span class="line">  </span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#做预测</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">datas</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.array([np.argmin(((np.tile(data,(k,<span class="number">1</span>))-center)**<span class="number">2</span>).<span class="built_in">sum</span>(axis=<span class="number">1</span>)) <span class="keyword">for</span> data <span class="keyword">in</span> datas])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">list_lost=[]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    min_loss=<span class="number">10000</span></span><br><span class="line">    min_loss_center=np.array([])</span><br><span class="line">    min_loss_result=np.array([])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        center,resultData=kmeans(data,k)</span><br><span class="line">        loss=<span class="built_in">sum</span>(resultData[:,<span class="number">1</span>])/data.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> loss&lt;min_loss:</span><br><span class="line">            min_loss=loss</span><br><span class="line">            min_loss_center=center</span><br><span class="line">            min_loss_result=resultData</span><br><span class="line">    list_lost.append(min_loss)</span><br></pre></td></tr></table></figure><pre><code>D:\IDEA\environment\py38\lib\site-packages\numpy\core\fromnumeric.py:3440: RuntimeWarning: Mean of empty slice.  return _methods._mean(a, axis=axis, dtype=dtype,D:\IDEA\environment\py38\lib\site-packages\numpy\core\_methods.py:181: RuntimeWarning: invalid value encountered in true_divide  ret = um.true_divide(</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_lost</span><br></pre></td></tr></table></figure><pre><code>[2.9811811738953176, 1.9708559728104191, 1.1675654672086735, 1.0712368269135584, 1.0064227003008, 0.9383457643136094, 0.8888370860975188, 0.8447057982645164]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>),list_lost)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;loss&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liwangshengya/picture/img/202201282312056.png" alt="png"></p><p>从图中可以明显看出k=4时就是其肘部点，将该样本数据聚成4类较为合理</p><h5 id="3-存在局限性">3.存在局限性</h5><p><img src="https://img-blog.csdnimg.cn/fc056a1876e447b7b4a62385f0b5e118.png" alt="在这里插入图片描述"><br>解决办法：DBSCAN算法</p><h5 id="4-数据比较大的时候，收敛会比较慢">4.数据比较大的时候，收敛会比较慢</h5><p>解决办法：mini batch k-means</p><h3 id="4-DBSCan算法">4.DBSCan算法</h3><p>DBSCAN算法算法是基于密度得一类聚类算法，可以将具有足够高密度的区域划分成簇，并可以发现任何形状的聚类。<br>下面先介绍几组概念：<br>==<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域==：给定对象半径<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>内的区域称为该对象的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域。<br>如下图所示，如果假设p点为中心点，以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>为半径的圆域就是p的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域。<br>==核心对象==：如果给定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域内的样本点数大于等于Minpoints，则该对象为核心对象。<br>如下图：假设Minpoints=3，以p为中心，他的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域内有4个样本点，大于Minpoints，所以以p为中心的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域是核心对象，而以Q为中心的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域中只有2个样本点，所以不是核心对象。<br>==直接密度可达==：给定一个对象集合D，如果q在p的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域内，且q是一个核心对象，则我们说对象p是从q出发是直接密度可达的。<br>如下图，如果p点是一个核心对象，M点是在P的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域内，那么认为M从P出发是直接密度可达的。<br>==密度可达==：集合D，存在一个对象链p1，p2，……，pn，满足p1=q，pn=p,且pn+1由pn直接密度可达，则称p由q密度可达。也就是说密度可达具有传递性。<br>如下图，P到M是直接密度可达的，M到Q也是直接密度可达的，那么P到Q就是密度可达的。<br>==密度相连==：集合D中存在点o，使得点p，q是从o关于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>和Minpoints密度可达的，那么p，q是关于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>和minpoint是密度相连的。<br>如下图，O到R是密度可达的，O到S也是密度可达的，则成S和R是密度相连的。</p><p><img src="https://img-blog.csdnimg.cn/5b02ceccea1849ad87a6810f21fe4496.png" alt="在这里插入图片描述"></p><h5 id="算法思想">算法思想</h5><p>1.指定合适的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>和minpoints<br>2.计算所有的样本的，如果点p的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>邻域里由超过Minpoints个点，则创建一个以p为核心点的新簇。<br>3.反复寻找这些核心点直接密度可达的点，将其加入到相应的簇，对于核心点发生“密度相连”状况的簇，给与合并。<br>4，当没有新的点可以被添加到任何簇时，算法结束。</p><p>算法优缺点：<br>优点：<br>①可以对任意形状的数据集进行聚类。<br>②可以在聚类的同时发现异常点，对数据集中的异常点不敏感。<br>③聚类结果较为稳定，相对的，k——Means算法初始值对聚类结果有很大的影响。<br>缺点：<br>①当数据量增大时，要求较大的内存支持和I/O消耗。<br>②当空间聚类的密度不均匀，聚类间差距差相差很大时，聚类质量较差。<br>DBSCAN与K-Means比较：<br>DBSCAN不需要输入聚类个数。<br>聚类的形状没有要求。<br>可以在需要时输入过滤噪声的参数(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>和minpoints)</p><p><a href="https://www.naftaliharris.com/blog/visualizing-dbscan-clustering/">算法可视化网站</a>，有兴趣可以去玩一玩。</p><h5 id="sklearn实现-3">sklearn实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> DBSCAN</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#载入数据</span></span><br><span class="line">data=np.genfromtxt(<span class="string">&#x27;kmeans.txt&#x27;</span>,delimiter=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练模型</span></span><br><span class="line">model=DBSCAN(eps=<span class="number">1.5</span>,min_samples=<span class="number">4</span>)</span><br><span class="line"><span class="comment">#eps时邻域的半径 min——samples是称为核心对象最小样本数</span></span><br><span class="line">model.fit(data)</span><br></pre></td></tr></table></figure><pre><code>DBSCAN(eps=1.5, min_samples=4)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result=model.fit_predict(data)<span class="comment">#先Fit后predict</span></span><br><span class="line">result</span><br><span class="line"><span class="comment">#样本标签为-1表示不属于任何一个类别</span></span><br></pre></td></tr></table></figure><pre><code>array([ 0,  1,  2,  3,  0,  1,  2,  3,  0,  1,  2,  3,  0,  1, -1,  2,  0,        1,  2,  3,  0,  1,  2,  3,  0,  1,  2,  3,  0,  1,  2,  3,  0,  1,        2,  3,  0,  1,  2,  3,  0,  1,  2,  3,  0,  1,  2,  3,  0,  1,  2,        3,  0,  1,  2,  3,  0,  1,  2,  3,  0,  1,  2,  3,  0,  1,  2,  3,        0,  1,  2,  3,  0,  1,  2,  3,  0,  1,  2,  3], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#画出各个数据点，用不同颜色分类表示</span></span><br><span class="line">mark=[<span class="string">&#x27;or&#x27;</span>,<span class="string">&#x27;ob&#x27;</span>,<span class="string">&#x27;og&#x27;</span>,<span class="string">&#x27;oy&#x27;</span>,<span class="string">&#x27;ok&#x27;</span>,<span class="string">&#x27;om&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i ,d <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    plt.plot(d[<span class="number">0</span>],d[<span class="number">1</span>],mark[result[i]])</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#紫色点可以认为是噪音数据</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/11799ec8f1f549a4994329cba055d1e2.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 非监督学习 </tag>
            
            <tag> 聚类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K近邻算法(kNN)</title>
      <link href="/2022/01/28/K%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95-kNN/"/>
      <url>/2022/01/28/K%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95-kNN/</url>
      
        <content type="html"><![CDATA[<h3 id="1-k近邻算法">1.k近邻算法</h3><p>k近邻学习(K-Nearest Neighbor,简称KNN)学习是一种常用的监督学习方法，其工作机制非常简单：给定测试样本，基于某种距离度量找出训练集中与其距离最近的k个样本，然后通过这k个邻居样本来进行预测，那种类别的邻居数量多，这个测试样本就被认为是那个类别的。与“投票”较为类似。下图是一个KNN的二分类问题的一个实列，可以看出k的取值不同，测试样本的分类也会不同，但都是基于他的邻居的投票的出的。<br><img src="https://img-blog.csdnimg.cn/07ffff5b00994afab159838fd0768543.png" alt=""></p><p>下面给出KNN算法的步骤：</p><p>① 计算未知样本与所有已知样本实列的距离。</p><p>②对距离从小到大进行排序</p><p>③选择出最近的k个已知实列</p><p>④这k个实列邻居进行投票，哪一个类别的票数多就认为k是那个类别的</p><p>其中计算的距离一般为欧氏距离(欧几里得距离)：</p><p><img src="https://img-blog.csdnimg.cn/d4d89abf2a97464eb5ac98d27c54fc24.png" alt=""></p><p>如图所示的欧几里得距离为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{(x_{2}-x_{1})^{2}+(y_{2}-y_{1})^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.305em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.895em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305em;"><span></span></span></span></span></span></span></span></span>。<br>算法的缺点为：①算法复杂度较高，需要计算所有已知样本与要分类样本的距离。</p><p>②当样本分布不平衡时，比如其中一类样本过大（实列数量过多）占主导时，新的未知实列容易被归类为这个主导样本，应为这类样本实列实列的数量过大，但这个新的未知实列实际并没有接近目标样本。如下图所示的黑色未知样本点，由于紫色的样本分布比红色样本分布更加密集，所以在分类时很容易将该未知样本分为了紫色类别，而通过观察显然应该被分为红色类别才合理一些。</p><p><img src="https://img-blog.csdnimg.cn/3990f040bf404d6ab7d75c036b4b4287.png" alt=""></p><h3 id="2-代码实现">2.代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br></pre></td></tr></table></figure><h4 id="手工实现">手工实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">knn</span>(<span class="params">x_test,x_train,y_train,k</span>):</span></span><br><span class="line">    distance=((np.tile(x_test,(x_train.shape[<span class="number">0</span>],<span class="number">1</span>))-x_train)**<span class="number">2</span>).<span class="built_in">sum</span>(axis=<span class="number">1</span>)**<span class="number">0.5</span></span><br><span class="line">    <span class="comment">#求所要预测点到所有样本点的欧式距离</span></span><br><span class="line">    sortdis=distance.argsort()<span class="comment">#对求得的距离进行排序</span></span><br><span class="line">    classCount=&#123;&#125;</span><br><span class="line">    <span class="comment">#求最近的n个点不同标签的次数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        label=y_train[sortdis[i]]</span><br><span class="line"></span><br><span class="line">        classCount[label]=classCount.get(label,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    <span class="comment">#对标签出现次数从大到小进行排序</span></span><br><span class="line">    sortClass=<span class="built_in">sorted</span>(classCount.items(),key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sortClass[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iris=datasets.load_iris()</span><br><span class="line"></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(iris.data,iris.target)</span><br><span class="line"><span class="built_in">print</span>(x_train.shape,x_test.shape)</span><br></pre></td></tr></table></figure><pre><code>(112, 4) (38, 4)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">predictinos=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x_test.shape[<span class="number">0</span>]):</span><br><span class="line">    predictinos.append(knn(x_test[i],x_train,y_train,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test,predictinos))</span><br></pre></td></tr></table></figure><pre><code>              precision    recall  f1-score   support           0       1.00      1.00      1.00        11           1       0.91      0.91      0.91        11           2       0.94      0.94      0.94        16    accuracy                           0.95        38   macro avg       0.95      0.95      0.95        38weighted avg       0.95      0.95      0.95        38</code></pre><p>​</p><h4 id="sklearn-实现">sklearn 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">model=KNeighborsClassifier()<span class="comment">#训练模型</span></span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line">predictinos1=model.predict(x_test)<span class="comment">#预测结果</span></span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test,predictinos1))</span><br></pre></td></tr></table></figure><pre><code>              precision    recall  f1-score   support           0       1.00      1.00      1.00        11           1       0.91      0.91      0.91        11           2       0.94      0.94      0.94        16    accuracy                           0.95        38   macro avg       0.95      0.95      0.95        38weighted avg       0.95      0.95      0.95        38</code></pre><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/28/hello-world/"/>
      <url>/2022/01/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
